{"componentChunkName":"component---src-components-post-tsx","path":"/running-a-simple-node-web-server-on-aws-ec2","result":{"pageContext":{"post":{"id":"cjn3l18390lyt0158i8qxs5dc","title":"Running A Simple Node Web Server On AWS EC2","slug":"running-a-simple-node-web-server-on-aws-ec2","published_at":"2018-10-11T02:35:54.72","created_at":"2018-10-10T20:03:59","encoded_html":"","excerpt":"","image":{"id":"pum3dk2chwjxbistc2948swe2","url":"static/cjn3l18390lyt0158i8qxs5dc/aws.png"},"posts_tags":[{"tag":{"id":"3pl7ejawubufz70vjnad","name":"AWS"}}],"date":"10/11/2018","html":"<p>How do you run a web server on EC2?</p>\n<p>I've used AWS Lambda and/or Cloudformation extensively but was curious to see how difficult it is to spin up a EC2 instance and expose the right ports from the command line. Using AWS' command line interface This is a good approach for testing and playing with tools and has advantages over Cloudformation. Debugging Cloudformation can be a huge pain. Also creating and updating stacks can take a bit longer than simply running an instance from terminal.</p>\n<h2>Back to the Basics</h2>\n<h3>Perquisites</h3>\n<ul>\n  <li>I'll assume you've installed <strong>AWS CLI</strong>. If not, start <a href=\"https://docs.aws.amazon.com/cli/latest/userguide/installing.html\">here</a>. You can check by running <code>&nbsp;aws --version.</code></li>\n  <li>I'll be using <strong>jq</strong>, which is like sed for JSON data. Install it <a href=\"https://stedolan.github.io/jq/\">here</a>.</li>\n</ul>\n<p>What parameters do we need to run an instance? We need:</p>\n<ul>\n  <li>The Amazon Machine Image (AMI) ID.</li>\n  <li>Private Key Name</li>\n  <li>Subnet ID</li>\n  <li>Security Group IDs</li>\n  <li>User Data</li>\n</ul>\n<p>Before running any commands, export the AWS region you want to use so that you're not prompted for every command. I'll be using us-east-1.</p>\n<pre><code class=\"language-bash\"><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">AWS_DEFAULT_REGION</span><span class=\"token operator\">=</span>us-east-1</code></pre>\n<h3>Amazon Machine Image (AMI) ID</h3>\n<p>This identifies the instance on Amazon's marketplace. We'll stick with defaults and use the latest Amazon Linux Image.</p>\n<p>Run:</p>\n<pre><code class=\"language-bash\">aws ssm get-parameters --names /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2 --query <span class=\"token string\">'Parameters[0].[Value]'</span> --output text</code></pre>\n<p>As of this writing, the latest Amazon Linux AMI is ami-0922553b7b0369273.</p>\n<h3>Private Key Name</h3>\n<p>When you create an EC2 instance on aws.amazon.com using the UI you're prompted to use an existing private key or create a new one. The private key is just the label associated with a set of public and private keys allowing SSH access to your instance.</p>\n<p>This command lists all of your existing key pairs:</p>\n<pre><code class=\"language-bash\">aws ec2 describe-key-pairs <span class=\"token operator\">|</span> jq -r <span class=\"token string\">'.KeyPairs'</span></code></pre>\n<p>If you don't have any keys, you can create a new one:</p>\n<pre><code class=\"language-bash\">aws ec2 create-key-pair --key-name webserver <span class=\"token operator\">|</span> jq -r <span class=\"token string\">'.KeyMaterial'</span> <span class=\"token operator\">></span> ~/.ssh/webserver.pem</code></pre>\n<p>This command saves the RSA key material to ~/.ssh/webserver.pem.</p>\n<h3>Subnet ID</h3>\n<p>AWS accounts have a default VPC, subnet, and set of security groups.</p>\n<p>Rather than create a new subnet we'll just use one of the subnets associated with the default VPC.</p>\n<p>Here's how you list subnets:</p>\n<pre><code class=\"language-bash\">aws ec2 describe-subnets <span class=\"token operator\">|</span> jq -r <span class=\"token string\">'.Subnets'</span></code></pre>\n<h3>Security Group IDs</h3>\n<p>For a web server, we'll use two security groups: a default security group associated with the default VPC, and a custom security group that exposes ports 22 (SSH), 80 (HTTP), and 443 (HTTPS).</p>\n<p>Get the default security group ID as follows:</p>\n<pre><code class=\"language-bash\">aws ec2 describe-security-groups --group-name default <span class=\"token operator\">|</span> jq -r <span class=\"token string\">'.SecurityGroups[0].GroupId'</span></code></pre>\n<p>And create a new security group:</p>\n<pre><code>aws ec2 create-security-group --group-name webserver --description webserver | jq -r '.GroupId'</code></pre>\n<p>Now we need to run authorize-security-group-ingress three times (once for each port).</p>\n<pre><code class=\"language-bash\">aws ec2 authorize-security-group-ingress --group-name webserver --protocol tcp --port <span class=\"token number\">22</span> --cidr <span class=\"token string\">'0.0.0.0/0'</span>\naws ec2 authorize-security-group-ingress --group-name webserver --protocol tcp --port <span class=\"token number\">80</span> --cidr <span class=\"token string\">'0.0.0.0/0'</span>\naws ec2 authorize-security-group-ingress --group-name webserver --protocol tcp --port <span class=\"token number\">443</span> --cidr <span class=\"token string\">'0.0.0.0/0'</span></code></pre>\n<p>We need to expose port 22 for SSH access, port 80 - the port that our node server will listen to, and port 443 for HTTPS.</p>\n<h2>User Data</h2>\n<p>User data lets us run scripts when the instance is launched. In this case, we need to install node and npm on the EC2 instance when it's created. Create a new file (e.g., user-data.sh) and add:</p>\n<pre><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash -v</span>\n<span class=\"token function\">su</span> ec2-user -c <span class=\"token string\">\"curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.2/install.sh | bash\"</span>\n<span class=\"token function\">su</span> ec2-user -c <span class=\"token string\">\"source /home/ec2-user/.nvm/nvm.sh &amp;&amp; nvm install node\"</span>\n<span class=\"token function\">su</span> ec2-user -c <span class=\"token string\">\"source /home/ec2-user/.nvm/nvm.sh &amp;&amp; nvm use node\"</span>\n<span class=\"token function\">ln</span> -s /home/ec2-user/.nvm/versions/node/v10.11.0/bin/node /usr/bin/node\n<span class=\"token function\">ln</span> -s /home/ec2-user/.nvm/versions/node/v10.11.0/bin/npm /usr/bin/npm\n<span class=\"token function\">mkdir</span> -p /var/www\n<span class=\"token builtin class-name\">echo</span> -e <span class=\"token string\">\"require('http').createServer((req, res) => {\"</span> <span class=\"token operator\">></span> /var/www/server.js\n<span class=\"token builtin class-name\">echo</span> -e <span class=\"token string\">\"  res.setHeader('content-type', 'text/plain')\"</span> <span class=\"token operator\">></span> /var/www/server.js\n<span class=\"token builtin class-name\">echo</span> -e <span class=\"token string\">\"  res.end('OK')\"</span> <span class=\"token operator\">></span> /var/www/server.js\n<span class=\"token builtin class-name\">echo</span> -e <span class=\"token string\">\"}).listen(process.env.PORT || 80)\"</span> <span class=\"token operator\">></span> /var/www/server.js\nnode /var/www/server.js</code></pre>\n<p>We'll supply the path to the user-data.sh script as a parameter when we create the EC2 instance like so:</p>\n<pre><code class=\"language-bash\">aws ec2 run-instances --user-data file://path/to/your/user-data.sh</code></pre>\n<p>Here's what everything looks like together:</p>\n<script src=\"https://gist.github.com/unshift/e54651bc2c1c98749935cd6bcd0ccd3c.js\"></script>"}}}}